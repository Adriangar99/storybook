diff --git a/package.json b/package.json
index 195dac9ee7d42fdb76bb22dc37580fa0bffd4680..980ad42f41a06023f9f7e370fd382c9217c24be5 100644
--- a/package.json
+++ b/package.json
@@ -55,7 +55,7 @@
     "contributors:generate": "all-contributors generate"
   },
   "peerDependencies": {
-    "svelte": "^3 || ^4"
+    "svelte": "^3 || ^4 || ^5"
   },
   "dependencies": {
     "@testing-library/dom": "^9.3.1"
diff --git a/src/pure.js b/src/pure.js
index 6d4943412448c9f310f007ca7dab9d04cef90d0d..6c6d23f7ba709e04ddefe68399c17d27f33ef96d 100644
--- a/src/pure.js
+++ b/src/pure.js
@@ -1,9 +1,9 @@
 import {
   fireEvent as dtlFireEvent,
   getQueriesForElement,
-  prettyDOM
+  prettyDOM,
 } from '@testing-library/dom'
-import { tick } from 'svelte'
+import { tick, createRoot } from 'svelte'
 
 const containerCache = new Set()
 const componentCache = new Set()
@@ -14,13 +14,13 @@ const svelteComponentOptions = [
   'props',
   'hydrate',
   'intro',
-  'context'
+  'context',
 ]
 
 const render = (
   Component,
   { target, ...options } = {},
-  { container, queries } = {}
+  { container, queries } = {},
 ) => {
   container = container || document.body
   target = target || container.appendChild(document.createElement('div'))
@@ -29,13 +29,13 @@ const render = (
 
   const checkProps = (options) => {
     const isProps = !Object.keys(options).some((option) =>
-      svelteComponentOptions.includes(option)
+      svelteComponentOptions.includes(option),
     )
 
     // Check if any props and Svelte options were accidentally mixed.
     if (!isProps) {
       const unrecognizedOptions = Object.keys(options).filter(
-        (option) => !svelteComponentOptions.includes(option)
+        (option) => !svelteComponentOptions.includes(option),
       )
 
       if (unrecognizedOptions.length > 0) {
@@ -54,18 +54,15 @@ const render = (
     return { props: options }
   }
 
-  let component = new ComponentConstructor({
+  let component = createRoot(ComponentConstructor, {
     target,
-    ...checkProps(options)
+    ...checkProps(options),
+    ondestroy: () => componentCache.delete(component),
   })
 
   containerCache.add({ container, target, component })
   componentCache.add(component)
 
-  component.$$.on_destroy.push(() => {
-    componentCache.delete(component)
-  })
-
   return {
     container,
     component,
@@ -73,23 +70,19 @@ const render = (
     rerender: (options) => {
       if (componentCache.has(component)) component.$destroy()
 
-      // eslint-disable-next-line no-new
-      component = new ComponentConstructor({
+      component = createRoot(ComponentConstructor, {
         target,
-        ...checkProps(options)
+        ...checkProps(options),
+        ondestroy: () => componentCache.delete(component),
       })
 
       containerCache.add({ container, target, component })
       componentCache.add(component)
-
-      component.$$.on_destroy.push(() => {
-        componentCache.delete(component)
-      })
     },
     unmount: () => {
       if (componentCache.has(component)) component.$destroy()
     },
-    ...getQueriesForElement(container, queries)
+    ...getQueriesForElement(container, queries),
   }
 }
 
@@ -109,9 +102,10 @@ const cleanup = () => {
   Array.from(containerCache.keys()).forEach(cleanupAtContainer)
 }
 
-const act = async (fn) => {
-  if (fn) {
-    await fn()
+const act = (fn) => {
+  const value = fn && fn()
+  if (value !== undefined && typeof value.then === 'function') {
+    return value.then(() => tick())
   }
   return tick()
 }
